// Generated by Dagger (https://dagger.dev).
package com.example.weatherapplication.presentation.forecast;

import com.example.weatherapplication.domain.location.LocationTracker;
import com.example.weatherapplication.domain.repository.WeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class ForecastWeatherViewModel_Factory implements Factory<ForecastWeatherViewModel> {
  private final Provider<WeatherRepository> repositoryProvider;

  private final Provider<LocationTracker> locationTrackerProvider;

  public ForecastWeatherViewModel_Factory(Provider<WeatherRepository> repositoryProvider,
      Provider<LocationTracker> locationTrackerProvider) {
    this.repositoryProvider = repositoryProvider;
    this.locationTrackerProvider = locationTrackerProvider;
  }

  @Override
  public ForecastWeatherViewModel get() {
    return newInstance(repositoryProvider.get(), locationTrackerProvider.get());
  }

  public static ForecastWeatherViewModel_Factory create(
      Provider<WeatherRepository> repositoryProvider,
      Provider<LocationTracker> locationTrackerProvider) {
    return new ForecastWeatherViewModel_Factory(repositoryProvider, locationTrackerProvider);
  }

  public static ForecastWeatherViewModel newInstance(WeatherRepository repository,
      LocationTracker locationTracker) {
    return new ForecastWeatherViewModel(repository, locationTracker);
  }
}
