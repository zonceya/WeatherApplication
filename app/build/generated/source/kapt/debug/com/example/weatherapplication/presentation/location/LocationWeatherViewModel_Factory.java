// Generated by Dagger (https://dagger.dev).
package com.example.weatherapplication.presentation.location;

import com.example.weatherapplication.domain.repository.WeatherRepository;
import com.example.weatherapplication.domain.util.SharedPreferencesManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class LocationWeatherViewModel_Factory implements Factory<LocationWeatherViewModel> {
  private final Provider<WeatherRepository> repositoryProvider;

  private final Provider<SharedPreferencesManager> sharedPreferencesManagerProvider;

  public LocationWeatherViewModel_Factory(Provider<WeatherRepository> repositoryProvider,
      Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    this.repositoryProvider = repositoryProvider;
    this.sharedPreferencesManagerProvider = sharedPreferencesManagerProvider;
  }

  @Override
  public LocationWeatherViewModel get() {
    return newInstance(repositoryProvider.get(), sharedPreferencesManagerProvider.get());
  }

  public static LocationWeatherViewModel_Factory create(
      Provider<WeatherRepository> repositoryProvider,
      Provider<SharedPreferencesManager> sharedPreferencesManagerProvider) {
    return new LocationWeatherViewModel_Factory(repositoryProvider, sharedPreferencesManagerProvider);
  }

  public static LocationWeatherViewModel newInstance(WeatherRepository repository,
      SharedPreferencesManager sharedPreferencesManager) {
    return new LocationWeatherViewModel(repository, sharedPreferencesManager);
  }
}
